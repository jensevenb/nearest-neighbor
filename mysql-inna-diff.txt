commit ab5069dacaf345ee090a05a97c8737e6e60f101c
Author: Jens Even Berg Blomsøy <jens.even.blomsoy@oracle.com>
Date:   Wed May 31 10:50:51 2017 +0200

    wl9449
    InnoDB: Distance scan of R-Tree for Nearest Neighbor Searches

diff --git a/client/mysql.cc b/client/mysql.cc
index 810db2e..e216be0 100644
--- a/client/mysql.cc
+++ b/client/mysql.cc
@@ -1,5 +1,5 @@
 /*
-   Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -5571,7 +5571,7 @@ static void nice_time(double sec,char *buff,bool part_second)
     buff=my_stpcpy(buff," min ");
   }
   if (part_second)
-    sprintf(buff,"%.2f sec",sec);
+    sprintf(buff,"%.8f sec",sec);
   else
     sprintf(buff,"%d sec",(int) sec);
 }
diff --git a/include/my_base.h b/include/my_base.h
index 4ce46ba..d855d9e 100644
--- a/include/my_base.h
+++ b/include/my_base.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
+/* Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -79,6 +79,7 @@ enum ha_rkey_function {
   HA_READ_MBR_WITHIN,             /* Minimum Bounding Rectangle within */
   HA_READ_MBR_DISJOINT,           /* Minimum Bounding Rectangle disjoint */
   HA_READ_MBR_EQUAL,              /* Minimum Bounding Rectangle equal */
+  HA_READ_NEAREST_NEIGHBOR,       /* Finds the k nearest neighbors. */
   HA_READ_INVALID= -1             /* Invalid enumeration value, always last. */
 };
 
diff --git a/mysql-test/suite/gis/t/knn.test b/mysql-test/suite/gis/t/knn.test
new file mode 100644
index 0000000..7b929fa
--- /dev/null
+++ b/mysql-test/suite/gis/t/knn.test
@@ -0,0 +1,37 @@
+###############################################################################
+#                                                                             #
+# This test is aimed to focus on the properties and attributes of the         #
+# Mutator ST_X and ST_Y                                                       #
+# point Geometry classes, and the functionality of ST_X() and ST_Y().         #
+#                                                                             #
+#                                                                             #
+# Creation Date: 2016-07-25                                                   #
+# Author : Jens Even Berg Blomsøy                                             #
+#                                                                             #
+###############################################################################
+
+
+###############################################################################
+# Creating the spatial objects                                                #
+###############################################################################
+
+--echo # Creating the spatial objects
+
+CREATE TABLE worst_case (g GEOMETRY NOT NULL, SPATIAL INDEX(g));
+
+
+###############################################################################
+# POINT                                                                       #
+###############################################################################
+
+INSERT INTO worst_case (g) values
+
+###############################################################################
+# Inserting POINT Geometry values                                             #
+###############################################################################
+
+SELECT ST_ASTEXT(g) FROM worst_case USE INDEX(g) WHERE 
+ST_Within(g,ST_POLYGONFROMTEXT('POLYGON((-532 -532,-532 532,532 532,532 -532,-532 -532))')) limit 4500;
+
+--echo # Final cleanup
+DROP TABLE worst_case;
diff --git a/sql/item_create.cc b/sql/item_create.cc
index d09b1b9..1f511a3 100644
--- a/sql/item_create.cc
+++ b/sql/item_create.cc
@@ -1,5 +1,5 @@
 /*
-   Copyright (c) 2000, 2016 Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2000, 2017 Oracle and/or its affiliates. All rights reserved.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -6936,7 +6936,7 @@ Item*
 Create_func_mbr_within::create(THD *thd, Item *arg1, Item *arg2)
 {
   return new (thd->mem_root) Item_func_spatial_mbr_rel(POS(), arg1, arg2,
-                               Item_func::SP_WITHIN_FUNC);
+                               Item_func::SP_NEAREST_NEIGHBOR);
 }
 
 
@@ -6946,7 +6946,7 @@ Item*
 Create_func_within::create(THD *thd, Item *arg1, Item *arg2)
 {
   return new (thd->mem_root) Item_func_spatial_rel(POS(), arg1, arg2,
-                                                   Item_func::SP_WITHIN_FUNC);
+                                                   Item_func::SP_NEAREST_NEIGHBOR);
 }
 
 
diff --git a/sql/item_func.h b/sql/item_func.h
index 382554b..90f64d8 100644
--- a/sql/item_func.h
+++ b/sql/item_func.h
@@ -1,7 +1,7 @@
 #ifndef ITEM_FUNC_INCLUDED
 #define ITEM_FUNC_INCLUDED
 
-/* Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
+/* Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -63,7 +63,7 @@ public:
 		  INTERVAL_FUNC, ISNOTNULLTEST_FUNC,
 		  SP_EQUALS_FUNC, SP_DISJOINT_FUNC,SP_INTERSECTS_FUNC,
 		  SP_TOUCHES_FUNC,SP_CROSSES_FUNC,SP_WITHIN_FUNC,
-		  SP_CONTAINS_FUNC,SP_COVEREDBY_FUNC,SP_COVERS_FUNC,
+		  SP_CONTAINS_FUNC,SP_COVEREDBY_FUNC,SP_COVERS_FUNC, SP_NEAREST_NEIGHBOR,
                   SP_OVERLAPS_FUNC,
 		  SP_STARTPOINT,SP_ENDPOINT,SP_EXTERIORRING,
 		  SP_POINTN,SP_GEOMETRYN,SP_INTERIORRINGN,
diff --git a/sql/item_geofunc_relchecks.cc b/sql/item_geofunc_relchecks.cc
index 2aaa73b..3af5052 100644
--- a/sql/item_geofunc_relchecks.cc
+++ b/sql/item_geofunc_relchecks.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+/* Copyright (c) 2014, 2017, Oracle and/or its affiliates. All rights reserved.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -52,6 +52,8 @@ const char *Item_func_spatial_mbr_rel::func_name() const
       return "mbrtouches";
     case SP_CROSSES_FUNC:
       return "mbrcrosses";
+    case SP_NEAREST_NEIGHBOR:
+      return "mbrnearestneighbor";
     case SP_OVERLAPS_FUNC:
       return "mbroverlaps";
     case SP_COVERS_FUNC:
@@ -192,6 +194,8 @@ const char *Item_func_spatial_rel::func_name() const
       return "st_touches";
     case SP_CROSSES_FUNC:
       return "st_crosses";
+    case SP_NEAREST_NEIGHBOR:
+      return "st_nearestneighbor";
     case SP_OVERLAPS_FUNC:
       return "st_overlaps";
     default:
@@ -214,8 +218,15 @@ longlong Item_func_spatial_rel::val_int()
   my_bool had_error= false;
   String wkt1, wkt2;
 
+  //short circuit for nearest neighbor
+  if (spatial_rel == SP_WITHIN_FUNC)
+  {
+    goto exit;
+  }
+
   res1= args[0]->val_str(&tmp_value1);
   res2= args[1]->val_str(&tmp_value2);
+
   if ((null_value= (!res1 || args[0]->null_value ||
                     !res2 || args[1]->null_value)))
     goto exit;
diff --git a/sql/opt_range.cc b/sql/opt_range.cc
index 5b9f90d..f827219 100644
--- a/sql/opt_range.cc
+++ b/sql/opt_range.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
+/* Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -665,7 +665,7 @@ public:
   void set_gis_index_read_function(const enum ha_rkey_function rkey_func)
   {
     DBUG_ASSERT(rkey_func >= HA_READ_MBR_CONTAIN &&
-                rkey_func <= HA_READ_MBR_EQUAL);
+                rkey_func <= HA_READ_NEAREST_NEIGHBOR);
     min_flag= GEOM_FLAG;
     rkey_func_flag= rkey_func;
     max_flag= NO_MAX_RANGE;
@@ -6917,6 +6917,7 @@ static bool is_spatial_operator(Item_func::Functype op_type)
   case Item_func::SP_CONTAINS_FUNC:
   case Item_func::SP_COVEREDBY_FUNC:
   case Item_func::SP_COVERS_FUNC:
+  case Item_func::SP_NEAREST_NEIGHBOR:
   case Item_func::SP_OVERLAPS_FUNC:
   case Item_func::SP_STARTPOINT:
   case Item_func::SP_ENDPOINT:
@@ -7327,10 +7328,9 @@ get_mm_leaf(RANGE_OPT_PARAM *param, Item *conf_func, Field *field,
   uchar *str;
   const char *impossible_cond_cause= NULL;
   DBUG_ENTER("get_mm_leaf");
-
   if (param->has_errors())
     goto end;
-
+  
   /*
     We need to restore the runtime mem_root of the thread in this
     function because it evaluates the value of its argument, while
@@ -7393,6 +7393,7 @@ get_mm_leaf(RANGE_OPT_PARAM *param, Item *conf_func, Field *field,
     case Item_func::SP_INTERSECTS_FUNC:
     case Item_func::SP_TOUCHES_FUNC:
     case Item_func::SP_CROSSES_FUNC:
+    case Item_func::SP_NEAREST_NEIGHBOR:
     case Item_func::SP_WITHIN_FUNC:
     case Item_func::SP_CONTAINS_FUNC:
     case Item_func::SP_OVERLAPS_FUNC:
@@ -7667,6 +7668,10 @@ get_mm_leaf(RANGE_OPT_PARAM *param, Item *conf_func, Field *field,
     tree->set_gis_index_read_function(HA_READ_MBR_INTERSECT);
     break;
 
+  case Item_func::SP_NEAREST_NEIGHBOR:
+    tree->set_gis_index_read_function(HA_READ_NEAREST_NEIGHBOR);
+    break;
+
   default:
     break;
   }
diff --git a/sql/sql_executor.cc b/sql/sql_executor.cc
index e72fe85f..135cf72 100644
--- a/sql/sql_executor.cc
+++ b/sql/sql_executor.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
+/* Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -1631,7 +1631,21 @@ evaluate_join_record(JOIN *join, QEP_TAB *const qep_tab)
               join, static_cast<int>(qep_tab_idx),
               qep_tab->table()->alias, condition));
 
-  if (condition)
+  if (join->where_cond && join->where_cond->type() == Item::FUNC_ITEM &&
+      down_cast<Item_func*>(join->where_cond)->functype() == Item_func::SP_NEAREST_NEIGHBOR)
+  {
+    if (join->thd->killed)
+    {
+      join->thd->send_kill_message();
+      DBUG_RETURN(NESTED_LOOP_KILLED);
+    }
+
+    /* check for errors evaluating the condition */
+    if (join->thd->is_error())
+      DBUG_RETURN(NESTED_LOOP_ERROR);
+  }
+
+  else if (condition)
   {
     found= MY_TEST(condition->val_int());
 
diff --git a/storage/innobase/btr/btr0btr.cc b/storage/innobase/btr/btr0btr.cc
index f6b02d2..99bae61 100644
--- a/storage/innobase/btr/btr0btr.cc
+++ b/storage/innobase/btr/btr0btr.cc
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 1994, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 1994, 2017, Oracle and/or its affiliates. All Rights Reserved.
 Copyright (c) 2012, Facebook Inc.
 
 This program is free software; you can redistribute it and/or modify it under
@@ -701,7 +701,6 @@ btr_node_ptr_set_child_page_no(
 /************************************************************//**
 Returns the child page of a node pointer and sx-latches it.
 @return child page, sx-latched */
-static
 buf_block_t*
 btr_node_ptr_get_child(
 /*===================*/
@@ -4390,6 +4389,17 @@ btr_index_rec_validate(
 		return(TRUE);
 	}
 
+  //WL9440jenseven test to print all pages remove after
+  if (dict_index_is_spatial(index))
+  {
+    fprintf(stderr, "the page no is %lu\n", (ulong)page_get_page_no(page));
+    rec_print_mbr_rec(stderr, rec, offsets);
+    fprintf(stderr, "\n");
+    
+}
+
+
+
 #ifdef VIRTUAL_INDEX_DEBUG
 	if (dict_index_has_virtual(index)) {
 		fprintf(stderr, "index name is %s\n", index->name());
diff --git a/storage/innobase/btr/btr0cur.cc b/storage/innobase/btr/btr0cur.cc
index b6f8fe1..e797be4 100644
--- a/storage/innobase/btr/btr0cur.cc
+++ b/storage/innobase/btr/btr0cur.cc
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 1994, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 1994, 2017, Oracle and/or its affiliates. All Rights Reserved.
 Copyright (c) 2008, Google Inc.
 Copyright (c) 2012, Facebook Inc.
 
@@ -1373,9 +1373,9 @@ retry_page_get:
 	}
 
 	/* If this is the desired level, leave the loop */
-
-	ut_ad(height == btr_page_get_level(page_cur_get_page(page_cursor),
-					   mtr));
+  page_cursor = btr_cur_get_page_cur(cursor);
+  height = btr_page_get_level(page_cur_get_page(page_cursor), mtr);
+	ut_ad(height == btr_page_get_level(page_cur_get_page(page_cursor), mtr));
 
 	/* Add Predicate lock if it is serializable isolation
 	and only if it is in the search case */
diff --git a/storage/innobase/gis/gis0geo.cc b/storage/innobase/gis/gis0geo.cc
index 219e187..4f9bc11 100644
--- a/storage/innobase/gis/gis0geo.cc
+++ b/storage/innobase/gis/gis0geo.cc
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 2013, 2015, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 2015, 2017, Oracle and/or its affiliates. All Rights Reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
@@ -25,12 +25,26 @@ Created 2013/03/27 Allen Lai and Jimmy Yang
 
 #include "page0types.h"
 #include "gis0geo.h"
+#include "gis0rtree.h"
 #include "page0cur.h"
 #include "ut0rnd.h"
 #include "mach0data.h"
-
-#include <spatial.h>
+#include "item_geofunc.h"
+#include "btr0btr.h"
+#include "btr0cur.h"
+#include "btr0pcur.h"
+#include "btr0sea.h"
+#include "mtr0mtr.h"
+
+#include "row0mysql.h"
+#include "row0sel.h"
+//#include <spatial.h>
 #include <cmath>
+#include <algorithm>
+#include <queue>
+#include <utility>
+#include <typeinfo>
+
 
 /* These definitions are for comparing 2 mbrs. */
 
@@ -59,6 +73,11 @@ Return false if equal, otherwise true. */
 #define EQUAL_CMP(amin, amax, bmin, bmax) \
 (((amin) != (bmin)) || ((amax) != (bmax)))
 
+/* Checks if b is a nearest neighbor of a TODO.
+Return something if something is something. 
+#define NEAREST_NEIGHBOR_CMP(amin, amax, bmin, bmax) \
+(((amin) > (bmin)) || ((amax) < (bmax)))*/
+
 /****************************************************************
 Functions for generating mbr
 ****************************************************************/
@@ -291,6 +310,311 @@ rtree_get_geometry_mbr(
 	return(res);
 }
 
+
+double
+linesegment_distance(point_xy* query, double x1, double x2, double y1, double y2)
+{
+  // Return minimum distance between line segment and point p
+  double xp = query->x;
+  double yp = query->y;
+
+  //This will avoid a square root
+  double l2 = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1); 
+
+  //t is how far along the line that the projection falls
+  double t = ((xp - x2)*(x1 - x2) + (yp - y2)*(y1 - y2)) / l2;
+  t = std::max(0.0, std::min(1.0, t));
+  
+  //The projection of point xp-yp onto the line is the point on the line closest to xp-yp
+  double distance = (xp - (x2 + t*(x1 - x2)))*(xp - (x2 + t*(x1 - x2)))
+    + (yp - (y2 + t*(y1 - y2)))*(yp - (y2 + t*(y1 - y2)));
+  return distance;
+}
+
+double
+calculate_distance(point_xy* query, rtr_mbr_t* targetmbr) /*Starting with just a mbr and a fixed point to make the calculations*/
+//calculate_distance(const Geometry *query, const MBR *target)
+{
+  double mindist= 0;
+
+  if (targetmbr->ymax ==453008)
+  {
+    bool brk = true;
+  }
+  //Distance inside a mbr
+  if ((query->x > targetmbr->xmin) && (query->x < targetmbr->xmax) && (query->y > targetmbr->ymin) && (query->y < targetmbr->ymax))
+  {
+    return 0;
+  }
+  // Distance to a point
+  if (targetmbr->xmax == targetmbr->xmin && targetmbr->ymin ==targetmbr->ymax)
+  {
+    mindist =  sqrt((pow((targetmbr->xmax -query->x), 2))+(pow((targetmbr->ymax - query->y), 2))); //xy-max
+  }
+  
+  else
+  {
+    double qp1p2= linesegment_distance(query, targetmbr->xmin, targetmbr->xmax, targetmbr->ymin, targetmbr->ymin);
+
+    double qp2p3= linesegment_distance(query, targetmbr->xmax, targetmbr->xmax, targetmbr->ymin, targetmbr->ymax);
+
+    double qp3p4= linesegment_distance(query, targetmbr->xmax, targetmbr->xmin, targetmbr->ymax, targetmbr->ymax);
+
+    double qp4p1= linesegment_distance(query, targetmbr->xmin, targetmbr->xmin, targetmbr->ymax, targetmbr->ymin);
+
+    double minlinedist= (qp1p2 < qp2p3)? qp1p2 : qp2p3;
+    double minlinedist1= (qp3p4 < qp4p1)? qp3p4 : qp4p1;
+    //Compare and return the smallest distance
+    mindist = (minlinedist < minlinedist1)? minlinedist : minlinedist1;
+    mindist= sqrt(mindist);
+  }
+  return mindist;
+}
+
+/*******************************************************************************
+Incrementing nearest neighbor algorithm with R-tree                            /
+The inputs to the R-tree incremental nearest neighbor algorithm                /
+are a query object q and an R-tree R containing a set of spatial data objects. /
+/******************************************************************************/
+void
+st_neighbor(
+  point_xy* qobject,
+  dict_index_t*		index_id,
+  rtr_info_t* &rtr_info
+)
+{
+  using std::vector;
+  using std::pair;
+  using std::make_pair;
+  using std::get;
+
+  /*R-tree index*/
+  rec_t*		user_rec;
+  rec_t*		next_rect;
+  mem_heap_t*	heap;
+  ulint		level;
+  dtuple_t*	tuple;
+  dfield_t*		dfield;
+  buf_block_t*	block;
+  page_no_t page_no;
+  page_no_t page_no1;
+  page_no_t page_no2= 0;
+  ulint*		offsets;
+  ulint		offsets1[REC_OFFS_NORMAL_SIZE];
+  rec_offs_init(offsets1);
+  offsets= offsets1;
+  ulint* offs;
+
+  mtr_t mtr;
+  mtr_start(&mtr);
+  page_t* root_page;
+
+  /* For spatial index, initialize structures to track
+  its parents etc. */
+  page_t* match_page = 0;
+  int matched_page = 0;
+  dict_mutex_enter_for_mysql();
+  heap = mem_heap_create(2500);
+  mem_heap_t* heap1 = mem_heap_create(250);
+  root_page = buf_block_get_frame(btr_root_block_get(index_id, RW_NO_LATCH, &mtr));
+  user_rec = page_rec_get_next(page_get_infimum_rec(root_page));
+  level = btr_page_get_level(root_page, mtr);
+  page_no1= index_id->page; //root page number
+  page_no = page_get_page_no(root_page);
+  tuple = dict_index_build_node_ptr(index_id, user_rec, page_no, heap, level);
+  next_rect = page_rec_get_next(user_rec);
+  dict_mutex_exit_for_mysql();
+
+  /*The query object*/
+  priqobj queryobject;
+  queryobject.data.geomboop = qobject;
+  queryobject.type=Value_type::geom_type;
+  pair<priqobj, double> queryobjectpair;
+  queryobjectpair = make_pair(queryobject, 0.0);
+
+  /*Root node from R-tree*/
+  rtr_mbr_t startmbr;
+  rtr_mbr_t mbr;
+  rtr_get_mbr_from_tuple(tuple, &startmbr);
+
+  //The Pair for the mbr and tuple
+  priqobj pqobjrect;
+  pqobjrect.data.rect= user_rec;
+  pqobjrect.type=Value_type::rec_type;
+
+  //The pair for the priqelement 
+  pair<priqobj, double> priqelement;
+  double tmpdistance1 =0;
+  double tmpdistance2 =0;
+
+  if (rtr_info->priority_q.empty())
+  {
+    priqelement = make_pair(pqobjrect, 0.0);
+
+    while (!page_rec_is_supremum_low(page_offset(get<0>(priqelement).data.rect)))
+    {
+      page_no1 = page_get_page_no(page_align(get<0>(priqelement).data.rect));
+      level = btr_page_get_level(page_align(get<0>(priqelement).data.rect), mtr);
+      tuple = dict_index_build_node_ptr(index_id, get<0>(priqelement).data.rect, page_no1, heap, level);
+      //Gets the mbr from the tuple
+      rtr_get_mbr_from_tuple(tuple, &mbr);
+
+      //Calculates the distance from the 
+      tmpdistance1 = calculate_distance(get<0>(queryobjectpair).data.geomboop, &mbr);
+      get<0>(priqelement).type=Value_type::rec_type;
+      //Pushes the records found in this page to the queue with its distance from the query object
+      rtr_info->priority_q.push(make_pair(get<0>(priqelement), tmpdistance1));
+      get<0>(priqelement).data.rect= page_rec_get_next(get<0>(priqelement).data.rect);
+    }
+   }
+  //While the queue is not empty, but where does the pruning come in?
+  while (!rtr_info->priority_q.empty()/*&& result.size()<2000*/)
+  {
+    //Removes first element in the queue 
+    priqelement=rtr_info->priority_q.top();
+
+    /*This calculation is supposed to calculate the distance between the query object and the first element in the pair(a Priqobj)*/
+    offs= rec_get_offsets(get<0>(priqelement).data.rect, index_id, offsets, ULINT_UNDEFINED, &heap);
+
+    rtr_get_mbr_from_rec(get<0>(priqelement).data.rect, offs, &mbr);
+    //GET THE DATA 
+    dfield= dtuple_get_nth_field(tuple, 0);
+    page_no1 = page_get_page_no(page_align(get<0>(priqelement).data.rect));
+    level = btr_page_get_level(page_align(get<0>(priqelement).data.rect), mtr);
+    tuple = dict_index_build_node_ptr(index_id, get<0>(priqelement).data.rect, page_no1, heap, level);
+    rtr_get_mbr_from_tuple(tuple, &mbr);
+    //Calculates the distance from the query object to the other objects(geom)
+
+    //Checks if this element already has a distance calculated
+    if (get<0>(priqelement).type==Value_type::geom_type)
+    {
+      tmpdistance1 = get<1>(rtr_info->priority_q.top());
+    }
+    else
+    {
+      tmpdistance1 = calculate_distance(get<0>(queryobjectpair).data.geomboop, &mbr);
+    }
+    rtr_info->priority_q.pop();
+
+    page_no1 = page_get_page_no(page_align(get<0>(priqelement).data.rect));
+    level = btr_page_get_level(page_align(get<0>(priqelement).data.rect), mtr);
+    tuple = dict_index_build_node_ptr(index_id, get<0>(priqelement).data.rect, page_no1, heap, level);
+    dfield= dtuple_get_nth_field(tuple, 0);
+
+    //if element is an object or "its" bounding rectangle? - I think this means OR the pointer to the object. Only the mbr is stored in the r-tree
+    //if (!(dfield->type.mtype== DATA_GEOMETRY /*DATA_POINT*/)|| !(dfield->type.prtype= 3583)/* && (dfield->type.prtype == DATA_GIS_MBR)*/)
+    if (get<0>(priqelement).type==Value_type::geom_type /*&& (tmpdistance1 = (tmpdistance2 = get<1>(rtr_info->priority_q.top())))*/)
+    {
+      /*If element is the bounding rectangle of object and the queue is not empty
+      and the distance from this element to the query object is BIGGER than
+      the distance from the next object in the queue to the query object. */
+      if (!rtr_info->priority_q.empty() && (tmpdistance1 >= (tmpdistance2 = get<1>(rtr_info->priority_q.top()))) && (get<0>(rtr_info->priority_q.top()).type==Value_type::rec_type))
+      {
+        //Then, push this element WILL THIS EVER BE HIT?
+        rtr_info->priority_q.push(make_pair(get<0>(priqelement), tmpdistance1));
+      }
+      else
+      {
+        //I'm guessing this means that a mbr can contain only one object?
+        //Report Element(or if bounding rectangle, the associated object) as the next nearest object
+        //Return the geometry with the distance (geometry is stored in the data field of the tuple)
+        //how do I return dis result queue 
+        //result.push_back(make_pair(get<0>(priqelement), get<1>(priqelement)));
+       
+        //To initialize the rtr_info
+        page_no1 = page_get_page_no(page_align(get<0>(priqelement).data.rect));
+        const space_id_t	space_id = dict_index_get_space(index_id);
+        const page_id_t		page_id(space_id, page_no1);
+        const page_size_t	page_size(dict_table_page_size(index_id->table));
+
+        if (rtr_info->matches->matched_recs->empty())
+        { 
+          
+          buf_block_t*	block_tmp = btr_block_get(page_id, page_size, RW_NO_LATCH,
+                                              index_id, &mtr);
+
+          rtr_init_match(rtr_info->matches, block_tmp, page_align(get<0>(priqelement).data.rect));
+          match_page = page_align(get<0>(priqelement).data.rect);
+          matched_page = page_get_page_no(page_align(get<0>(priqelement).data.rect));
+        }
+
+        if (matched_page == page_get_page_no(page_align(get<0>(priqelement).data.rect)) || 
+            rtr_info->matches->block.page.id.page_no() == NULL && (rtr_info->matches->used + 100) < UNIV_PAGE_SIZE){
+          
+          rtr_leaf_push_match_rec(get<0>(priqelement).data.rect, rtr_info, 
+                                  offsets, page_is_comp(page_align(get<0>(priqelement).data.rect)), get<1>(priqelement));
+        }
+        else
+        {
+          //Push this popped element back into the queue
+          rtr_info->priority_q.push(priqelement);
+          //Input a save this rec that was not pushed back into the queue. 
+          goto exit;
+        }
+      }
+    }
+    //The algorithm splits open a bounding box and looks inside. The mbr holds only a SQUARE, no data
+    //How about a tuple? A tuple holds the data and the mbr
+    else if (page_is_leaf(page_align(get<0>(priqelement).data.rect)))
+    {
+      //Pushes the objects found in the mbr to the queue with its distance.
+      //Remember only a pointer to the object is stored in the R-tree
+      //This prqelement is a rec witch does not contain other mbr's, 
+      //  this one contains only one mbr and a pointer to the geometry
+
+        //GET THE DATA 
+        dfield= dtuple_get_nth_field(tuple, 0);
+        page_no1 = page_get_page_no(page_align(get<0>(priqelement).data.rect));
+        level = btr_page_get_level(page_align(get<0>(priqelement).data.rect), mtr);
+        tuple = dict_index_build_node_ptr(index_id, get<0>(priqelement).data.rect, page_no1, heap, level);
+        rtr_get_mbr_from_tuple(tuple, &mbr);
+        //Calculates the distance from the query object to the other objects(geom)
+        tmpdistance1 = calculate_distance(get<0>(queryobjectpair).data.geomboop, &mbr);
+        
+        //pqobjtuple.data.tuple = dtuple_get_nth_field(tuple, i);
+        //Pushes the geom objects to the priority queue
+        get<0>(priqelement).type=Value_type::geom_type;
+        rtr_info->priority_q.push(make_pair(get<0>(priqelement), tmpdistance1));
+    }
+    else
+    {
+      //Gets the child page 
+      //If this priqelement is not a leaf node, it is a mbr that contains other mbr
+      block = btr_node_ptr_get_child(get<0>(priqelement).data.rect, index_id, offs, &mtr);
+      page_t* ppage = buf_block_get_frame(block);
+      get<0>(priqelement).data.rect= page_rec_get_next(page_get_infimum_rec(ppage));
+
+      while (!page_rec_is_supremum_low(page_offset(get<0>(priqelement).data.rect)))
+      {
+        //Gets the tuple from the record stored in priqelement and makes a tuple
+        page_no1 = page_get_page_no(page_align(get<0>(priqelement).data.rect));
+        level = btr_page_get_level(page_align(get<0>(priqelement).data.rect), mtr);
+        tuple = dict_index_build_node_ptr(index_id, get<0>(priqelement).data.rect, page_no1, heap, level);
+        //Gets the mbr from the tuple
+        rtr_get_mbr_from_tuple(tuple, &mbr);
+
+        //Calculates the distance from the 
+        tmpdistance1 = calculate_distance(get<0>(queryobjectpair).data.geomboop, &mbr);
+        if (mbr.xmax==mbr.xmin && mbr.ymin==mbr.ymax)
+        {
+          get<0>(priqelement).type=Value_type::geom_type;
+        }
+        else
+        {
+          get<0>(priqelement).type=Value_type::rec_type;
+        }
+        
+        //Pushes the records found in this page to the queue with its distance from the query object
+        rtr_info->priority_q.push(make_pair(get<0>(priqelement), tmpdistance1));
+        get<0>(priqelement).data.rect= page_rec_get_next(get<0>(priqelement).data.rect);
+      }
+    }
+  }
+  exit:
+  mem_heap_free(heap);
+  mtr_commit(&mtr);
+}
+
 /*************************************************************//**
 Calculate Minimal Bounding Rectangle (MBR) of the spatial object
 stored in "well-known binary representation" (wkb) format.
@@ -673,6 +997,12 @@ rtree_key_cmp(
 			}
 
 			break;
+    /*case PAGE_CUR_NEAREST_NEIGHBOR:
+      if (NEAREST_NEIGHBOR_CMP(/*insert something ))
+      {
+        return(1);
+      }*/
+
 		default:
 			/* if unknown comparison operator */
 			ut_ad(0);
diff --git a/storage/innobase/gis/gis0rtree.cc b/storage/innobase/gis/gis0rtree.cc
index cc9c56b..3dc23f1 100644
--- a/storage/innobase/gis/gis0rtree.cc
+++ b/storage/innobase/gis/gis0rtree.cc
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 2017, Oracle and/or its affiliates. All Rights Reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
@@ -1862,6 +1862,7 @@ rtr_estimate_n_rows_in_range(
 	case PAGE_CUR_INTERSECT:
 	case PAGE_CUR_WITHIN:
 	case PAGE_CUR_MBR_EQUAL:
+  case PAGE_CUR_NEAREST_NEIGHBOR:
 		break;
 	default:
 		return(HA_POS_ERROR);
@@ -1942,6 +1943,7 @@ rtr_estimate_n_rows_in_range(
 			case PAGE_CUR_DISJOINT:
 				break;
 
+      case PAGE_CUR_NEAREST_NEIGHBOR:
 			case PAGE_CUR_WITHIN:
 			case PAGE_CUR_MBR_EQUAL:
 				if (rtree_key_cmp(
@@ -1951,6 +1953,7 @@ rtr_estimate_n_rows_in_range(
 					area += 1;
 				}
 
+
 				break;
 
 			default:
@@ -1958,6 +1961,11 @@ rtr_estimate_n_rows_in_range(
 			}
 		} else {
 			switch (mode) {
+     /* case PAGE_CUR_NEAREST_NEIGHBOR:
+        area += rtree_area_overlapping(range_mbr_ptr,
+                                       field, DATA_MBR_LEN) / rec_area;
+        break;
+        */
 			case PAGE_CUR_CONTAIN:
 			case PAGE_CUR_INTERSECT:
 				area += rtree_area_overlapping(range_mbr_ptr,
@@ -1970,6 +1978,7 @@ rtr_estimate_n_rows_in_range(
 						field, DATA_MBR_LEN) / rec_area;
 				break;
 
+      case PAGE_CUR_NEAREST_NEIGHBOR:
 			case PAGE_CUR_WITHIN:
 			case PAGE_CUR_MBR_EQUAL:
 				if (rtree_key_cmp(
@@ -1978,7 +1987,6 @@ rtr_estimate_n_rows_in_range(
 				    == 0) {
 					area += range_area / rec_area;
 				}
-
 				break;
 			default:
 				ut_error;
diff --git a/storage/innobase/gis/gis0sea.cc b/storage/innobase/gis/gis0sea.cc
index c3cf2db..65c9ee5 100644
--- a/storage/innobase/gis/gis0sea.cc
+++ b/storage/innobase/gis/gis0sea.cc
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 2017, Oracle and/or its affiliates. All Rights Reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
@@ -39,6 +39,7 @@ Created 2014/01/16 Jimmy Yang
 #include "trx0trx.h"
 #include "srv0mon.h"
 #include "gis0geo.h"
+#include "spatial.h"
 
 #endif /* UNIV_HOTBACKUP */
 
@@ -111,6 +112,30 @@ rtr_pcur_getnext_from_path(
 	bool		for_delete = false;
 	bool		for_undo_ins = false;
 
+
+  /*if (rtr_info->retrived_matches>=1000)
+  {
+    pq g; 
+    rtr_info->retrived_matches=0;
+    rtr_info->priority_q = g;
+    return(false);
+  }*/
+  if (rtr_info->path->empty() && !rtr_info->priority_q.empty())
+  {
+    using std::get;
+    //The pair for the priqelement 
+    pair<priqobj, double> priqelement;
+    priqelement=rtr_info->priority_q.top();
+    //rtr_info->priority_q.pop();
+    rtr_non_leaf_stack_push(
+      rtr_info->path,
+      page_get_page_no(page_align(get<0>(priqelement).data.rect)),
+      rtr_get_current_ssn_id(index), level-1, 1,
+      NULL, 0);
+  }
+
+
+
 	/* exhausted all the pages to be searched */
 	if (rtr_info->path->empty()) {
 		return(false);
@@ -152,7 +177,7 @@ rtr_pcur_getnext_from_path(
 
 	const page_size_t&	page_size = dict_table_page_size(index->table);
 
-	/* Pop each node/page to be searched from "path" structure
+  /* Pop each node/page to be searched from "path" structure
 	and do a search on it. Please note, any pages that are in
 	the "path" structure are protected by "page" lock, so tey
 	cannot be shrunk away */
@@ -973,6 +998,7 @@ rtr_create_rtr_info(
 
 	rtr_info->path = UT_NEW_NOKEY(rtr_node_path_t());
 	rtr_info->parent_path = UT_NEW_NOKEY(rtr_node_path_t());
+  UT_NEW_NOKEY(pq());
 	rtr_info->need_prdt_lock = need_prdt;
 	mutex_create(LATCH_ID_RTR_PATH_MUTEX,
 		     &rtr_info->rtr_path_mutex);
@@ -1010,7 +1036,7 @@ rtr_init_rtr_info(
 	dict_index_t*	index,		/*!< in: index structure */
 	bool		reinit)		/*!< in: Whether this is a reinit */
 {
-	ut_ad(rtr_info);
+	//ut_ad(rtr_info);
 
 	if (!reinit) {
 		/* Reset all members. */
@@ -1101,6 +1127,15 @@ rtr_clean_rtr_info(
 		rtr_info->matches->valid = false;
 		rtr_info->matches->matched_recs->clear();
 	}
+  if (!rtr_info->priority_q.empty())
+  {
+    //UT_DELETE(&rtr_info->priority_q);
+    rtr_info->priority_q= pq();
+   /* while (!rtr_info->priority_q.empty())
+    {
+      rtr_info->priority_q.pop();
+    }*/
+  }
 
 	if (index) {
 		index->rtr_track->rtr_active->remove(rtr_info);
@@ -1422,14 +1457,14 @@ search_again:
 
 /****************************************************************//**
 Copy the leaf level R-tree record, and push it to matched_rec in rtr_info */
-static
 void
 rtr_leaf_push_match_rec(
 /*====================*/
 	const rec_t*	rec,		/*!< in: record to copy */
 	rtr_info_t*	rtr_info,	/*!< in/out: search stack */
 	ulint*		offsets,	/*!< in: offsets */
-	bool		is_comp)	/*!< in: is compact format */
+	bool		is_comp,    /*!< in: is compact format */
+  double distance)	  /*!< in: distance to query */
 {
 	byte*		buf;
 	matched_rec_t*	match_rec = rtr_info->matches;
@@ -1449,9 +1484,15 @@ rtr_leaf_push_match_rec(
 
 	rtr_rec.r_rec = copy;
 	rtr_rec.locked = false;
+  rtr_rec.distance= distance; 
 
-	match_rec->matched_recs->push_back(rtr_rec);
-	match_rec->valid = true;
+	
+  /*This changes the functionality to push the record to the front of the queue. Not sure if this is the right way to go.
+    The records are now printed in the right order, but the last match on each page is returned first.
+  */
+  //match_rec->matched_recs->push_back(rtr_rec);
+  match_rec->matched_recs->insert(match_rec->matched_recs->begin(), rtr_rec);
+  match_rec->valid = true;
 
 	data_len = rec_offs_data_size(offsets) + rec_offs_extra_size(offsets);
 	match_rec->used += data_len;
@@ -1583,7 +1624,6 @@ rtr_copy_buf(
 /****************************************************************//**
 Generate a shadow copy of the page block header to save the
 matched records */
-static
 void
 rtr_init_match(
 /*===========*/
@@ -1679,6 +1719,54 @@ rtr_cur_search_with_match(
 	space_id_t	space = block->page.id.space();
 	page_cur_mode_t	orig_mode = mode;
 	const rec_t*	first_rec = NULL;
+  /*
+  //TESTING 
+  mtr_t mtr;
+  mtr_start(&mtr);
+  page_t* root_page;
+  page_t* boop;
+
+   For spatial index, initialize structures to track
+  its parents etc. 
+
+  mem_heap_t* heap1 = mem_heap_create(250);
+  root_page = buf_block_get_frame(btr_root_block_get(index, RW_NO_LATCH, &mtr));
+  rec_t* user_rec = page_rec_get_next(page_get_infimum_rec(root_page));
+  ulint level1 = btr_page_get_level(root_page, mtr);
+  page_no_t page_no = page_get_page_no(root_page);
+  dtuple_t* tuple1 = dict_index_build_node_ptr(index, user_rec, page_no, heap1, level1);
+
+  rtr_mbr_t mbr1;
+  rtr_get_mbr_from_tuple(tuple, &mbr1);
+  //rtr_get_mbr_from_rec(user_rec, 0, &mbr1);
+
+  */
+  if (mode == PAGE_CUR_NEAREST_NEIGHBOR)
+  {
+    point_xy geom;
+    geom.x= -739851300;
+    geom.y=  407588960;
+
+    st_neighbor(&geom, index, rtr_info);
+
+    if (rtr_info->matches->matched_recs->empty()&& rtr_info->priority_q.empty())
+    {
+      return(false);
+    }
+
+    /* There are matched records */
+    matched_rec_t*	match_rec = rtr_info->matches;
+
+    rtr_rec_t	test_rec;
+
+    test_rec = match_rec->matched_recs->back();
+    match_rec->matched_recs->back();
+    page_cur_position(test_rec.r_rec, &match_rec->block,
+                      cursor);
+    rtr_info->matches->matched_recs->pop_back();
+      return(true);
+  }
+
 
 	rec_offs_init(offsets_);
 
@@ -1880,7 +1968,7 @@ rtr_cur_search_with_match(
 						ULINT_UNDEFINED, &heap);
 					rtr_leaf_push_match_rec(
 						rec, rtr_info, offsets,
-						page_is_comp(page));
+						page_is_comp(page), 0);
 				}
 
 				last_match_rec = rec;
@@ -1946,6 +2034,19 @@ rtr_cur_search_with_match(
 				goto func_exit;
 			}
 
+      //TEST
+      mtr_t mtr;
+      mtr_start(&mtr);
+      page_t* root_page = buf_block_get_frame(btr_root_block_get(index, RW_NO_LATCH, &mtr));
+      rec_t* user_rec = page_rec_get_next(page_get_infimum_rec(root_page));
+      ulint level1 = btr_page_get_level(root_page, mtr);
+      page_no_t page_no = page_get_page_no(root_page);
+      mem_heap_t* heap1 = mem_heap_create(250);
+      dtuple_t* tupl = dict_index_build_node_ptr(index, user_rec, page_no, heap1, level1);
+      rtr_mbr_t startmbr;
+      rtr_get_mbr_from_tuple(tupl, &startmbr);
+
+
 			/* There are matched records */
 			matched_rec_t*	match_rec = rtr_info->matches;
 
diff --git a/storage/innobase/handler/ha_innodb.cc b/storage/innobase/handler/ha_innodb.cc
index 967918e..49b847e 100644
--- a/storage/innobase/handler/ha_innodb.cc
+++ b/storage/innobase/handler/ha_innodb.cc
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 2000, 2016 Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 2000, 2017 Oracle and/or its affiliates. All Rights Reserved.
 Copyright (c) 2008, 2009 Google Inc.
 Copyright (c) 2009, Percona Inc.
 Copyright (c) 2012, Facebook Inc.
@@ -8955,7 +8955,7 @@ convert_search_mode_to_innobase(
 	case HA_READ_MBR_INTERSECT:
 		return(PAGE_CUR_INTERSECT);
 	case HA_READ_MBR_WITHIN:
-		return(PAGE_CUR_WITHIN);
+		return(PAGE_CUR_NEAREST_NEIGHBOR); //PAGE_CUR_WITHIN
 	case HA_READ_MBR_DISJOINT:
 		return(PAGE_CUR_DISJOINT);
 	case HA_READ_MBR_EQUAL:
@@ -8964,6 +8964,8 @@ convert_search_mode_to_innobase(
 		return(PAGE_CUR_UNSUPP);
         case HA_READ_INVALID:
 		return(PAGE_CUR_UNSUPP);
+  case HA_READ_NEAREST_NEIGHBOR:
+    return(PAGE_CUR_NEAREST_NEIGHBOR);
 	/* do not use "default:" in order to produce a gcc warning:
 	enumeration value '...' not handled in switch
 	(if -Wswitch or -Wall is used) */
@@ -9137,7 +9139,6 @@ ha_innobase::index_read(
 
 			m_prebuilt->ins_sel_stmt = thd_is_ins_sel_stmt(
 				m_user_thd);
-
 			ret = row_search_mvcc(
 				buf, mode, m_prebuilt, match_mode, 0);
 
@@ -14233,20 +14234,39 @@ ha_innobase::records_in_range(
 		max_key ? max_key->flag : HA_READ_KEY_EXACT);
 
 	if (mode1 != PAGE_CUR_UNSUPP && mode2 != PAGE_CUR_UNSUPP) {
-
-		if (dict_index_is_spatial(index)) {
-			/*Only min_key used in spatial index. */
-			n_rows = rtr_estimate_n_rows_in_range(
-				index, range_start, mode1);
-		} else {
+    
+    if (dict_index_is_spatial(index))
+    {
+      /*Only min_key used in spatial index. */
+      n_rows = rtr_estimate_n_rows_in_range(
+        index, range_start, mode1);
+    }
+    else {
 			n_rows = btr_estimate_n_rows_in_range(
 				index, range_start, mode1, range_end, mode2);
 		}
+
 	} else {
 
 		n_rows = HA_POS_ERROR;
 	}
-
+  /*if (dict_index_is_spatial(index) && mode1 == PAGE_CUR_NEAREST_NEIGHBOR && m_prebuilt->index != NULL)
+  {
+    /*Only min_key used in spatial index. 
+    //m_prebuilt->index= index;
+    point_xy geom;
+    geom.x=50000;
+    geom.y=10000;
+    //btr_pcur_store_position(m_prebuilt->pcur, mtr);
+    //btr_cur_t* cursor = btr_pcur_get_btr_cur(m_prebuilt->pcur);
+    //m_prebuilt = row_create_prebuilt(index->table, table->s->reclength);
+    
+    st_neighbor(&geom, m_prebuilt/*, mtr);
+    m_prebuilt->rtr_info->search_mode=mode1;
+    //btr_pcur_store_position(m_prebuilt->pcur, mtr);
+    //st_neighbor(&geom, m_prebuilt, mtr);
+
+  }*/
 	mem_heap_free(heap);
 
 	DBUG_EXECUTE_IF(
diff --git a/storage/innobase/handler/ha_innodb.h b/storage/innobase/handler/ha_innodb.h
index 1eab0bc..bf8601b 100644
--- a/storage/innobase/handler/ha_innodb.h
+++ b/storage/innobase/handler/ha_innodb.h
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 2000, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 2000, 2017, Oracle and/or its affiliates. All Rights Reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
diff --git a/storage/innobase/include/btr0btr.h b/storage/innobase/include/btr0btr.h
index ac22e3a..252055f 100644
--- a/storage/innobase/include/btr0btr.h
+++ b/storage/innobase/include/btr0btr.h
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 1994, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 1994, 2017, Oracle and/or its affiliates. All Rights Reserved.
 Copyright (c) 2012, Facebook Inc.
 
 This program is free software; you can redistribute it and/or modify it under
@@ -322,6 +322,15 @@ btr_node_ptr_get_child_page_no(
 @param[in,out]	mtr			mini-transaction
 @return page number of the created root
 @retval FIL_NULL if did not succeed */
+
+buf_block_t*
+btr_node_ptr_get_child(
+  /*===================*/
+  const rec_t*	node_ptr,/*!< in: node pointer */
+  dict_index_t*	index,	/*!< in: index */
+  const ulint*	offsets,/*!< in: array returned by rec_get_offsets() */
+  mtr_t*		mtr);	/*!< in: mtr */
+
 ulint
 btr_create(
 	ulint			type,
diff --git a/storage/innobase/include/gis0geo.h b/storage/innobase/include/gis0geo.h
index 08895af..6a713df 100644
--- a/storage/innobase/include/gis0geo.h
+++ b/storage/innobase/include/gis0geo.h
@@ -1,5 +1,5 @@
 /*****************************************************************************
-Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.
+Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
 
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
@@ -25,6 +25,11 @@ The r-tree define from MyISAM
 
 #include "my_global.h"
 #include "string.h"
+#include "spatial.h"
+//#include "gis0type.h"
+//#include <string>
+//#include "btr0cur.h"
+//#include "row0mysql.h"
 
 #define SPTYPE HA_KEYTYPE_DOUBLE
 #define SPLEN  8
@@ -149,6 +154,45 @@ rtree_area_increase(
 	int		a_len,		/*!< in: mbr length. */
 	double*		ab_area);	/*!< out: increased area. */
 
+
+
+
+//Priority queue object
+enum class Value_type { geom_type, rec_type };
+  struct priqobj
+  {
+   // priqobj(const priqobj &pobj);
+    priqobj() {}
+    ~priqobj(){}
+    Value_type type;
+    union
+    {
+      point_xy*	geomboop;			//!< A geometry type
+      rec_t* rect;
+      //MBR* mbr;
+    }data;
+  };
+
+/*************************************************************//**
+Calculates the nearest neighbor to the query object and
+returns them in a sorted list */
+  void
+    st_neighbor(
+      point_xy* qobject,
+      dict_index_t*		index,
+      struct rtr_info* &rtr_info
+    );
+
+///COMPARE DISTANCE
+class CompareDist
+{
+public:
+  bool operator()(std::pair<priqobj, double> n1, std::pair<priqobj, double> n2)
+  {
+    return n1.second>n2.second;
+  }
+};
+
 /** Calculates overlapping area
 @param[in]	a	mbr a
 @param[in]	b	mbr b
diff --git a/storage/innobase/include/gis0rtree.h b/storage/innobase/include/gis0rtree.h
index 64062fd..0082de8 100644
--- a/storage/innobase/include/gis0rtree.h
+++ b/storage/innobase/include/gis0rtree.h
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 2014, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 2014, 2017, Oracle and/or its affiliates. All Rights Reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
@@ -70,7 +70,7 @@ Created 2013/03/27 Jimmy Yang and Allen Lai
 
 /* Define it for rtree search mode checking. */
 #define RTREE_SEARCH_MODE(mode)					\
-	(((mode) >= PAGE_CUR_CONTAIN) && ((mode <= PAGE_CUR_RTREE_GET_FATHER)))
+	(((mode) >= PAGE_CUR_CONTAIN) && ((mode <= PAGE_CUR_NEAREST_NEIGHBOR)))
 
 /* Geometry data header */
 #define	GEO_DATA_HEADER_SIZE	4
@@ -207,6 +207,27 @@ rtr_get_father_node(
 @param[in]	child_no	child page no
 @param[in]	cursor		position cursor
 @param[in]	mbr_inc		MBR needs to be enlarged */
+
+
+/****************************************************************//**
+ Generate a shadow copy of the page block header to save the
+ matched records */
+void
+rtr_init_match(
+  /*===========*/
+  matched_rec_t*		matches,/*!< in/out: match to initialize */
+  const buf_block_t*	block,	/*!< in: buffer block */
+  const page_t*		page);	/*!< in: buffer page */
+
+void
+rtr_leaf_push_match_rec(
+  /*====================*/
+  const rec_t*	rec,		/*!< in: record to copy */
+  rtr_info_t*	rtr_info,	/*!< in/out: search stack */
+  ulint*		offsets,	/*!< in: offsets */
+  bool		is_comp,    /*!< in: is compact format */
+  double distance);
+
 UNIV_INLINE
 void
 rtr_non_leaf_stack_push(
diff --git a/storage/innobase/include/gis0type.h b/storage/innobase/include/gis0type.h
index cb3d30b..30767e6 100644
--- a/storage/innobase/include/gis0type.h
+++ b/storage/innobase/include/gis0type.h
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 2014, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 2014, 2017, Oracle and/or its affiliates. All Rights Reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
@@ -69,6 +69,7 @@ typedef std::vector<node_visit_t, ut_allocator<node_visit_t> >	rtr_node_path_t;
 typedef	struct rtr_rec {
 		rec_t*	r_rec;		/*!< matched record */
 		bool	locked;		/*!< whether the record locked */
+    double distance;
 } rtr_rec_t;
 
 typedef std::vector<rtr_rec_t, ut_allocator<rtr_rec_t> >	rtr_rec_vector;
@@ -105,6 +106,9 @@ modification (split, shrink), we always latch left, current
 and right pages */
 #define RTR_LEAF_LATCH_NUM	3
 
+using std::vector;
+using std::pair;
+typedef std::priority_queue<pair<priqobj, double>, vector<pair<priqobj, double>>, CompareDist> pq;
 /** Vectors holding the matching internal pages/nodes and leaf records */
 typedef	struct rtr_info{
 	rtr_node_path_t*path;	/*!< vector holding matching pages */
@@ -112,6 +116,7 @@ typedef	struct rtr_info{
 				/*!< vector holding parent pages during
 				search */
 	matched_rec_t*	matches;/*!< struct holding matching leaf records */
+ // int retrived_matches;/*!< count of how many matches are retrieved */
 	ib_mutex_t	rtr_path_mutex;
 				/*!< mutex protect the "path" vector */
 	buf_block_t*	tree_blocks[RTR_MAX_LEVELS + RTR_LEAF_LATCH_NUM];
@@ -140,6 +145,7 @@ typedef	struct rtr_info{
 				/*!< search tuple being used */
 	page_cur_mode_t	search_mode;
 				/*!< current search mode */
+  pq priority_q;
 } rtr_info_t;
 
 typedef std::list<rtr_info_t*, ut_allocator<rtr_info_t*> >	rtr_info_active;
diff --git a/storage/innobase/include/page0types.h b/storage/innobase/include/page0types.h
index 9426fe4..bcfd807 100644
--- a/storage/innobase/include/page0types.h
+++ b/storage/innobase/include/page0types.h
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 1994, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 1994, 2017, Oracle and/or its affiliates. All Rights Reserved.
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
@@ -172,7 +172,8 @@ enum page_cur_mode_t {
 	PAGE_CUR_MBR_EQUAL		= 11,
 	PAGE_CUR_RTREE_INSERT		= 12,
 	PAGE_CUR_RTREE_LOCATE		= 13,
-	PAGE_CUR_RTREE_GET_FATHER	= 14
+	PAGE_CUR_RTREE_GET_FATHER	= 14,
+  PAGE_CUR_NEAREST_NEIGHBOR = 15
 };
 
 /** Compressed page descriptor */
diff --git a/storage/innobase/row/row0sel.cc b/storage/innobase/row/row0sel.cc
index 0df3ff0..e6fc4a2 100644
--- a/storage/innobase/row/row0sel.cc
+++ b/storage/innobase/row/row0sel.cc
@@ -1,6 +1,6 @@
 /*****************************************************************************
 
-Copyright (c) 1997, 2016, Oracle and/or its affiliates. All Rights Reserved.
+Copyright (c) 1997, 2017, Oracle and/or its affiliates. All Rights Reserved.
 Copyright (c) 2008, Google Inc.
 
 Portions of this file contain modifications contributed and copyrighted by
diff --git a/storage/perfschema/pfs_engine_table.cc b/storage/perfschema/pfs_engine_table.cc
index 4aeba9c..aeb62e4 100644
--- a/storage/perfschema/pfs_engine_table.cc
+++ b/storage/perfschema/pfs_engine_table.cc
@@ -1,4 +1,4 @@
-/* Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
+/* Copyright (c) 2008, 2017, Oracle and/or its affiliates. All rights reserved.
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
@@ -1122,6 +1122,7 @@ int PFS_engine_table::index_read(KEY *key_infos,
   DBUG_ASSERT(find_flag != HA_READ_MBR_WITHIN);
   DBUG_ASSERT(find_flag != HA_READ_MBR_DISJOINT);
   DBUG_ASSERT(find_flag != HA_READ_MBR_EQUAL);
+  DBUG_ASSERT(find_flag != HA_READ_NEAREST_NEIGHBOR);
 
   KEY *key_info= key_infos + index;
   m_index->set_key_info(key_info);
